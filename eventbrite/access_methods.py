# -*- coding: utf-8 -*-
"""
Last Generated: 2017-04-06 19:40:14.576507

This module (access_methods.py) is autogenerated from the Eventbrite API
documentation. Any and all changes to this module must be implemented as
part of that autogeneration. Therefore, we cannot accept any pull requests,
as the next generation of this module will the changes to be overwritten.
"""

class AccessMethodsMixin(object):

    def get_categories(self, **data):
        """
        GET /categories/
        Returns a list of :format:`category` as ``categories``, including
        subcategories nested.
        """
        return self.get("/categories/", data=data)

    def get_category(self, id, **data):
        """
        GET /categories/:id/
        Gets a :format:`category` by ID as ``category``.
        """
        
        return self.get("/categories/{0}/".format(id), data=data)

    def get_subcategories(self, **data):
        """
        GET /subcategories/
        Returns a list of :format:`subcategory` as ``subcategories``.
        """
        return self.get("/subcategories/", data=data)

    def get_subcategory(self, id, **data):
        """
        GET /subcategories/:id/
        Gets a :format:`subcategory` by ID as ``subcategory``.
        """
        
        return self.get("/subcategories/{0}/".format(id), data=data)

    def get_event_search(self, **data):
        """
        GET /events/search/
        Allows you to retrieve a paginated response of public :format:`event` objects from across Eventbrite’s directory, regardless of which user owns the event.
        """
        return self.get("/events/search/", data=data)

    def post_events(self, **data):
        """
        POST /events/
        Makes a new event, and returns an :format:`event` for the specified event. Does not support the creation of repeating
        event series.
        field event.venue_id
        The ID of a previously-created venue to associate with this event.
        You can omit this field or set it to ``null`` if you set ``online_event``.
        """
        return self.post("/events/", data=data)

    def get_event(self, id, **data):
        """
        GET /events/:id/
        Returns an :format:`event` for the specified event. Many of Eventbrite’s API use cases revolve around pulling details
        of a specific event within an Eventbrite account. Does not support fetching a repeating event series parent
        (see :ref:`get-series-by-id`).
        """
        
        return self.get("/events/{0}/".format(id), data=data)

    def post_event(self, id, **data):
        """
        POST /events/:id/
        Updates an event. Returns an :format:`event` for the specified event. Does not support updating a repeating event
        series parent (see POST /series/:id/).
        """
        
        return self.post("/events/{0}/".format(id), data=data)

    def post_event_publish(self, id, **data):
        """
        POST /events/:id/publish/
        Publishes an event if it has not already been deleted. In order for publish to be permitted, the event must have all
        necessary information, including a name and description, an organizer, at least one ticket, and valid payment options.
        This API endpoint will return argument errors for event fields that fail to validate the publish requirements. Returns
        a boolean indicating success or failure of the publish.
        field_error event.name MISSING
        Your event must have a name to be published.
        field_error event.start MISSING
        Your event must have a start date to be published.
        field_error event.end MISSING
        Your event must have an end date to be published.
        field_error event.start.timezone MISSING
        Your event start and end dates must have matching time zones to be published.
        field_error event.organizer MISSING
        Your event must have an organizer to be published.
        field_error event.currency MISSING
        Your event must have a currency to be published.
        field_error event.currency INVALID
        Your event must have a valid currency to be published.
        field_error event.tickets MISSING
        Your event must have at least one ticket to be published.
        field_error event.tickets.N.name MISSING
        All tickets must have names in order for your event to be published. The N will be the ticket class ID with the
        error.
        field_error event.tickets.N.quantity_total MISSING
        All non-donation tickets must have an available quantity value in order for your event to be published. The N
        will be the ticket class ID with the error.
        field_error event.tickets.N.cost MISSING
        All non-donation tickets must have a cost (which can be ``0.00`` for free tickets) in order for your event to
        be published. The N will be the ticket class ID with the error.
        """
        
        return self.post("/events/{0}/publish/".format(id), data=data)

    def post_event_unpublish(self, id, **data):
        """
        POST /events/:id/unpublish/
        Unpublishes an event. In order for a free event to be unpublished, it must not have any pending or completed orders,
        even if the event is in the past. In order for a paid event to be unpublished, it must not have any pending or completed
        orders, unless the event has been completed and paid out. Returns a boolean indicating success or failure of the
        unpublish.
        """
        
        return self.post("/events/{0}/unpublish/".format(id), data=data)

    def post_event_cancel(self, id, **data):
        """
        POST /events/:id/cancel/
        Cancels an event if it has not already been deleted. In order for cancel to be permitted, there must be no pending or
        completed orders. Returns a boolean indicating success or failure of the cancel.
        """
        
        return self.post("/events/{0}/cancel/".format(id), data=data)

    def delete_event(self, id, **data):
        """
        DELETE /events/:id/
        Deletes an event if the delete is permitted. In order for a delete to be permitted, there must be no pending or
        completed orders. Returns a boolean indicating success or failure of the delete.
        """
        
        return self.delete("/events/{0}/".format(id), data=data)

    def get_event_display_settings(self, id, **data):
        """
        GET /events/:id/display_settings/
        Retrieves the display settings for an event.
        """
        
        return self.get("/events/{0}/display_settings/".format(id), data=data)

    def post_event_display_settings(self, id, **data):
        """
        POST /events/:id/display_settings/
        Updates the display settings for an event.
        """
        
        return self.post("/events/{0}/display_settings/".format(id), data=data)

    def get_event_ticket_classes(self, id, **data):
        """
        GET /events/:id/ticket_classes/
        Returns a :ref:`paginated <pagination>` response with a key of
        ``ticket_classes``, containing a list of :format:`ticket_class`.
        """
        
        return self.get("/events/{0}/ticket_classes/".format(id), data=data)

    def post_event_ticket_classes(self, id, **data):
        """
        POST /events/:id/ticket_classes/
        Creates a new ticket class, returning the result as a :format:`ticket_class`
        under the key ``ticket_class``.
        """
        
        return self.post("/events/{0}/ticket_classes/".format(id), data=data)

    def get_event_ticket_class(self, id, ticket_class_id, **data):
        """
        GET /events/:id/ticket_classes/:ticket_class_id/
        Gets and returns a single :format:`ticket_class` by ID, as the key
        ``ticket_class``.
        """
        
        return self.get("/events/{0}/ticket_classes/{0}/".format(id,ticket_class_id), data=data)

    def post_event_ticket_class(self, id, ticket_class_id, **data):
        """
        POST /events/:id/ticket_classes/:ticket_class_id/
        Updates an existing ticket class, returning the updated result as a :format:`ticket_class` under the key ``ticket_class``.
        """
        
        return self.post("/events/{0}/ticket_classes/{0}/".format(id,ticket_class_id), data=data)

    def delete_event_ticket_class(self, id, ticket_class_id, **data):
        """
        DELETE /events/:id/ticket_classes/:ticket_class_id/
        Deletes the ticket class. Returns ``{"deleted": true}``.
        """
        
        return self.delete("/events/{0}/ticket_classes/{0}/".format(id,ticket_class_id), data=data)

    def get_event_canned_questions(self, id, **data):
        """
        GET /events/:id/canned_questions/
        This endpoint returns canned questions of a single event (examples: first name, last name, company, prefix, etc.). This endpoint will return :format:`question`.
        """
        
        return self.get("/events/{0}/canned_questions/".format(id), data=data)

    def get_event_questions(self, id, **data):
        """
        GET /events/:id/questions/
        Eventbrite allows event organizers to add custom questions that attendees fill
        out upon registration. This endpoint can be helpful for determining what
        custom information is collected and available per event.
        This endpoint will return :format:`question`.
        """
        
        return self.get("/events/{0}/questions/".format(id), data=data)

    def get_event_question(self, id, question_id, **data):
        """
        GET /events/:id/questions/:question_id/
        This endpoint will return :format:`question` for a specific question id.
        """
        
        return self.get("/events/{0}/questions/{0}/".format(id,question_id), data=data)

    def get_event_attendees(self, id, **data):
        """
        GET /events/:id/attendees/
        Returns a :ref:`paginated <pagination>` response with a key of ``attendees``, containing a list of :format:`attendee`.
        """
        
        return self.get("/events/{0}/attendees/".format(id), data=data)

    def get_event_attendee(self, id, attendee_id, **data):
        """
        GET /events/:id/attendees/:attendee_id/
        Returns a single :format:`attendee` by ID, as the key ``attendee``.
        """
        
        return self.get("/events/{0}/attendees/{0}/".format(id,attendee_id), data=data)

    def get_event_orders(self, id, **data):
        """
        GET /events/:id/orders/
        Returns a :ref:`paginated <pagination>` response with a key of ``orders``, containing a list of :format:`order` against this event.
        """
        
        return self.get("/events/{0}/orders/".format(id), data=data)

    def get_event_discounts(self, id, **data):
        """
        GET /events/:id/discounts/
        Returns a :ref:`paginated <pagination>` response with a key of ``discounts``,
        containing a list of :format:`discounts <discount>` available on this event.
        field_error event_id NOT_FOUND
        The event id you are attempting to use does not exist.
        """
        
        return self.get("/events/{0}/discounts/".format(id), data=data)

    def post_event_discounts(self, id, **data):
        """
        POST /events/:id/discounts/
        Creates a new discount; returns the result as a :format:`discount` as the key ``discount``.
        """
        
        return self.post("/events/{0}/discounts/".format(id), data=data)

    def get_event_discount(self, id, discount_id, **data):
        """
        GET /events/:id/discounts/:discount_id/
        Gets a :format:`discount` by ID as the key ``discount``.
        """
        
        return self.get("/events/{0}/discounts/{0}/".format(id,discount_id), data=data)

    def post_event_discount(self, id, discount_id, **data):
        """
        POST /events/:id/discounts/:discount_id/
        Updates a discount; returns the result as a :format:`discount` as the key ``discount``.
        """
        
        return self.post("/events/{0}/discounts/{0}/".format(id,discount_id), data=data)

    def get_event_public_discounts(self, id, **data):
        """
        GET /events/:id/public_discounts/
        Returns a :ref:`paginated <pagination>` response with a key of ``discounts``, containing a list of public :format:`discounts <discount>` available on this event.
        Note that public discounts and discounts have exactly the same form and structure; they're just namespaced separately, and public ones (and the public GET endpoints) are visible to anyone who can see the event.
        """
        
        return self.get("/events/{0}/public_discounts/".format(id), data=data)

    def post_event_public_discounts(self, id, **data):
        """
        POST /events/:id/public_discounts/
        Creates a new public discount; returns the result as a :format:`discount` as the key ``discount``.
        """
        
        return self.post("/events/{0}/public_discounts/".format(id), data=data)

    def get_event_public_discount(self, id, discount_id, **data):
        """
        GET /events/:id/public_discounts/:discount_id/
        Gets a public :format:`discount` by ID as the key ``discount``.
        """
        
        return self.get("/events/{0}/public_discounts/{0}/".format(id,discount_id), data=data)

    def post_event_public_discount(self, id, discount_id, **data):
        """
        POST /events/:id/public_discounts/:discount_id/
        Updates a public discount; returns the result as a :format:`discount` as the key ``discount``.
        """
        
        return self.post("/events/{0}/public_discounts/{0}/".format(id,discount_id), data=data)

    def delete_event_public_discount(self, id, discount_id, **data):
        """
        DELETE /events/:id/public_discounts/:discount_id/
        Deletes a public discount.
        """
        
        return self.delete("/events/{0}/public_discounts/{0}/".format(id,discount_id), data=data)

    def get_event_access_codes(self, id, **data):
        """
        GET /events/:id/access_codes/
        Returns a :ref:`paginated <pagination>` response with a key of ``access_codes``, containing a list of :format:`access_codes <access_code>` available on this event.
        """
        
        return self.get("/events/{0}/access_codes/".format(id), data=data)

    def post_event_access_codes(self, id, **data):
        """
        POST /events/:id/access_codes/
        Creates a new access code; returns the result as a :format:`access_code` as the key ``access_code``.
        """
        
        return self.post("/events/{0}/access_codes/".format(id), data=data)

    def get_event_access_code(self, id, access_code_id, **data):
        """
        GET /events/:id/access_codes/:access_code_id/
        Gets a :format:`access_code` by ID as the key ``access_code``.
        """
        
        return self.get("/events/{0}/access_codes/{0}/".format(id,access_code_id), data=data)

    def post_event_access_code(self, id, access_code_id, **data):
        """
        POST /events/:id/access_codes/:access_code_id/
        Updates an access code; returns the result as a :format:`access_code` as the
        key ``access_code``.
        """
        
        return self.post("/events/{0}/access_codes/{0}/".format(id,access_code_id), data=data)

    def get_event_transfers(self, id, **data):
        """
        GET /events/:id/transfers/
        Returns a list of :format:`transfers` for the event.
        """
        
        return self.get("/events/{0}/transfers/".format(id), data=data)

    def get_event_teams(self, id, **data):
        """
        GET /events/:id/teams/
        Returns a list of :format:`teams` for the event.
        """
        
        return self.get("/events/{0}/teams/".format(id), data=data)

    def get_event_team(self, id, team_id, **data):
        """
        GET /events/:id/teams/:team_id/
        Returns information for a single :format:`teams`.
        """
        
        return self.get("/events/{0}/teams/{0}/".format(id,team_id), data=data)

    def get_event_teams_attendees(self, id, team_id, **data):
        """
        GET /events/:id/teams/:team_id/attendees/
        Returns :format:`attendees` for a single :format:`teams`.
        """
        
        return self.get("/events/{0}/teams/{0}/attendees/".format(id,team_id), data=data)

    def post_series(self, **data):
        """
        POST /series/
        Creates a new repeating event series. The POST data must include information for at least one event date in the series.
        .. _get-series-by-id:
        """
        return self.post("/series/", data=data)

    def get_one_series(self, id, **data):
        """
        GET /series/:id/
        Returns a repeating event series parent object for the specified repeating event series.
        .. _post-series-by-id:
        """
        
        return self.get("/series/{0}/".format(id), data=data)

    def post_one_series(self, id, **data):
        """
        POST /series/:id/
        Updates a repeating event series parent object, and optionally also creates more event dates or updates or deletes
        existing event dates in the series. In order for a series date to be deleted or updated, there must be no pending or
        completed orders for that date.
        .. _publish-series-by-id:
        """
        
        return self.post("/series/{0}/".format(id), data=data)

    def post_series_publish(self, id, **data):
        """
        POST /series/:id/publish/
        Publishes a repeating event series and all of its occurrences that are not already canceled or deleted. Once a date is cancelled it can still be uncancelled and can be viewed by the public. A deleted date cannot be undeleted and cannot by viewed by the public. In order for
        publish to be permitted, the event must have all necessary information, including a name and description, an organizer,
        at least one ticket, and valid payment options. This API endpoint will return argument errors for event fields that
        fail to validate the publish requirements. Returns a boolean indicating success or failure of the publish.
        field_error event.name MISSING
        Your event must have a name to be published.
        field_error event.start MISSING
        Your event must have a start date to be published.
        field_error event.end MISSING
        Your event must have an end date to be published.
        field_error event.start.timezone MISSING
        Your event start and end dates must have matching time zones to be published.
        field_error event.organizer MISSING
        Your event must have an organizer to be published.
        field_error event.currency MISSING
        Your event must have a currency to be published.
        field_error event.currency INVALID
        Your event must have a valid currency to be published.
        field_error event.tickets MISSING
        Your event must have at least one ticket to be published.
        field_error event.tickets.N.name MISSING
        All tickets must have names in order for your event to be published. The N will be the ticket class ID with the
        error.
        field_error event.tickets.N.quantity_total MISSING
        All non-donation tickets must have an available quantity value in order for your event to be published. The N
        will be the ticket class ID with the error.
        field_error event.tickets.N.cost MISSING
        All non-donation tickets must have a cost (which can be ``0.00`` for free tickets) in order for your event to
        be published. The N will be the ticket class ID with the error.
        .. _unpublish-series-by-id:
        """
        
        return self.post("/series/{0}/publish/".format(id), data=data)

    def post_series_unpublish(self, id, **data):
        """
        POST /series/:id/unpublish/
        Unpublishes a repeating event series and all of its occurrences that are not already completed, canceled, or deleted. In
        order for a free series to be unpublished, it must not have any pending or completed orders for any dates, even past
        dates. In order for a paid series to be unpublished, it must not have any pending or completed orders for any dates,
        except that completed orders for past dates that have been completed and paid out do not prevent an unpublish. Returns
        a boolean indicating success or failure of the unpublish.
        .. _cancel-series-by-id:
        """
        
        return self.post("/series/{0}/unpublish/".format(id), data=data)

    def post_series_cancel(self, id, **data):
        """
        POST /series/:id/cancel/
        Cancels a repeating event series and all of its occurrences that are not already canceled or deleted. In order for
        cancel to be permitted, there must be no pending or completed orders for any dates in the series. Returns a boolean
        indicating success or failure of the cancel.
        .. _delete-series-by-id:
        """
        
        return self.post("/series/{0}/cancel/".format(id), data=data)

    def delete_one_series(self, id, **data):
        """
        DELETE /series/:id/
        Deletes a repeating event series and all of its occurrences if the delete is permitted. In order for a delete to be
        permitted, there must be no pending or completed orders for any dates in the series. Returns a boolean indicating
        success or failure of the delete.
        .. _get-series-events:
        """
        
        return self.delete("/series/{0}/".format(id), data=data)

    def get_series_events(self, id, **data):
        """
        GET /series/:id/events/
        Returns all of the events that belong to this repeating event series.
        .. _post-series-dates:
        """
        
        return self.get("/series/{0}/events/".format(id), data=data)

    def post_series_events(self, id, **data):
        """
        POST /series/:id/events/
        Creates more event dates or updates or deletes existing event dates in a repeating event series. In order for a series
        date to be deleted or updated, there must be no pending or completed orders for that date.
        """
        
        return self.post("/series/{0}/events/".format(id), data=data)

    def get_formats(self, **data):
        """
        GET /formats/
        Returns a list of :format:`format` as ``formats``.
        """
        return self.get("/formats/", data=data)

    def get_format(self, id, **data):
        """
        GET /formats/:id/
        Gets a :format:`format` by ID as ``format``.        """
        
        return self.get("/formats/{0}/".format(id), data=data)

    def get_media(self, id, **data):
        """
        GET /media/:id/
        Return an :format:`image` for a given id.
        """
        
        return self.get("/media/{0}/".format(id), data=data)

    def get_media_upload(self, **data):
        """
        GET /media/upload/
        See `Media Uploads <https://www.eventbrite.com/developer/v3/resources/uploads/>`_.
        """
        return self.get("/media/upload/", data=data)

    def post_media_upload(self, **data):
        """
        POST /media/upload/
        See `Media Uploads <https://www.eventbrite.com/developer/v3/resources/uploads/>`_.        """
        return self.post("/media/upload/", data=data)

    def get_order(self, id, **data):
        """
        GET /orders/:id/
        Gets an :format:`order` by ID as the key ``order``.
        """
        
        return self.get("/orders/{0}/".format(id), data=data)

    def post_organizers(self, **data):
        """
        POST /organizers/
        Makes a new organizer. Returns an :format:`organizer` as ``organizer``.
        field_error organizer.name DUPLICATE
        You already have another organizer with this name.
        field_error organizer.short_name UNAVAILABLE
        There is already another organizer or event with this short name.
        field_error organizer.logo_id INVALID
        This is not a valid image.
        field_error organizer.facebook INVALID
        This is not a valid Facebook profile URL.
        field_error organizer.facebook NO_GROUP_PAGES
        The Facebook URL cannot be a group page.
        """
        return self.post("/organizers/", data=data)

    def get_organizer(self, id, **data):
        """
        GET /organizers/:id/
        Gets an :format:`organizer` by ID as ``organizer``.
        """
        
        return self.get("/organizers/{0}/".format(id), data=data)

    def post_organizer(self, id, **data):
        """
        POST /organizers/:id/
        Updates an :format:`organizer` and returns it as as ``organizer``.
        field_error organizer.name DUPLICATE
        You already have another organizer with this name.
        field_error organizer.short_name UNAVAILABLE
        There is already another organizer or event with this short name.
        field_error organizer.logo_id INVALID
        This is not a valid image.
        field_error organizer.facebook INVALID
        This is not a valid Facebook profile URL.
        field_error organizer.facebook NO_GROUP_PAGES
        The Facebook URL cannot be a group page.
        """
        
        return self.post("/organizers/{0}/".format(id), data=data)

    def get_organizers_events(self, id, **data):
        """
        GET /organizers/:id/events/
        Gets events of the :format:`organizer`.
        """
        
        return self.get("/organizers/{0}/events/".format(id), data=data)

    def get_refund_request(self, id, **data):
        """
        GET /refund_requests/:id/
        Gets a :format:`refund-request` for the specified refund request.
        error NOT_AUTHORIZED
        Only the order's buyer can create a refund request
        error FIELD_UNKNOWN
        The refund request id provided is unknown
        """
        
        return self.get("/refund_requests/{0}/".format(id), data=data)

    def post_refund_request(self, id, **data):
        """
        POST /refund_requests/:id/
        Update a :format:`refund-request` for a specific order. Each element in items is a :format:`refund-item`
        error NOT_AUTHORIZED
        Only the order's buyer can create a refund request
        error FIELD_UNKNOWN
        The refund request id provided is unknown
        error INVALID_REFUND_REQUEST_STATUS
        The refund request is not the correct status for the change
        """
        
        return self.post("/refund_requests/{0}/".format(id), data=data)

    def post_refund_requests(self, **data):
        """
        POST /refund_requests/
        Creates a :format:`refund-request` for a specific order. Each element in items is a :format:`refund-item`
        error NOT_AUTHORIZED
        Only the order's buyer can create a refund request
        error FIELD_UNKNOWN
        The order id provided is unknown
        error EVENT_DOES_NOT_ALLOW_REFUND_REQUESTS
        According to organizer definition, the event does not allow the creation of refund requests.
        error EXISTING_REFUND_REQUEST_FOR_ORDER
        The order already has a refund request
        error INVALID_ORDER_STATE
        The order status is not allowed to request a refund. It must be placed.        """
        return self.post("/refund_requests/", data=data)

    def get_reports_sales(self, **data):
        """
        GET /reports/sales/
        Returns a response of the aggregate sales data.
        """
        return self.get("/reports/sales/", data=data)

    def get_reports_attendees(self, **data):
        """
        GET /reports/attendees/
        Returns a response of the aggregate attendees data.
        """
        return self.get("/reports/attendees/", data=data)

    def get_system_timezones(self, **data):
        """
        GET /system/timezones/
        Returns a :ref:`paginated <pagination>` response with a key of ``timezones``,
        containing a list of :format:`timezones <timezone>`.
        """
        return self.get("/system/timezones/", data=data)

    def get_system_regions(self, **data):
        """
        GET /system/regions/
        Returns a single page response with a key of ``regions``,
        containing a list of :format:`regions`.
        """
        return self.get("/system/regions/", data=data)

    def get_system_countries(self, **data):
        """
        GET /system/countries/
        Returns a single page response with a key of ``countries``,
        containing a list of :format:`countries`.
        """
        return self.get("/system/countries/", data=data)

    def post_tracking_beacons(self, **data):
        """
        POST /tracking_beacons/
        Makes a new tracking beacon. Returns an :format:`tracking_beacon` as ``tracking_beacon``. Either ``event_id`` or ``user_id`` is required for each tracking beacon. If the ``event_id`` is provided, the tracking pixel will fire only for that event. If the ``user_id`` is provided, the tracking pixel will fire for all events organized by that user.
        field_error tracking_beacon.event_id INVALID
        This is not a valid event.
        field_error tracking_beacon.user_id INVALID
        This is not a valid user.
        """
        return self.post("/tracking_beacons/", data=data)

    def get_tracking_beacon(self, tracking_beacons_id, **data):
        """
        GET /tracking_beacons/:tracking_beacons_id/
        Returns the :format:`tracking_beacon` with the specified :tracking_beacons_id.
        """
        
        return self.get("/tracking_beacons/{0}/".format(tracking_beacons_id), data=data)

    def post_tracking_beacon(self, tracking_beacons_id, **data):
        """
        POST /tracking_beacons/:tracking_beacons_id/
        Updates the :format:`tracking_beacons` with the specified :tracking_beacons_id. Though ``event_id`` and ``user_id`` are not individually required, it is a requirement to have a tracking beacon where either one must exist. Returns an :format:`tracking_beacon` as ``tracking_beacon``.
        """
        
        return self.post("/tracking_beacons/{0}/".format(tracking_beacons_id), data=data)

    def delete_tracking_beacon(self, tracking_beacons_id, **data):
        """
        DELETE /tracking_beacons/:tracking_beacons_id/
        Delete the :format:`tracking_beacons` with the specified :tracking_beacons_id.
        """
        
        return self.delete("/tracking_beacons/{0}/".format(tracking_beacons_id), data=data)

    def get_event_tracking_beacons(self, event_id, **data):
        """
        GET /events/:event_id/tracking_beacons/
        Returns the list of :format:`tracking_beacon` for the event :event_id
        """
        
        return self.get("/events/{0}/tracking_beacons/".format(event_id), data=data)

    def get_user_tracking_beacons(self, user_id, **data):
        """
        GET /users/:user_id/tracking_beacons/
        Returns the list of :format:`tracking_beacon` for the user :user_id
        """
        
        return self.get("/users/{0}/tracking_beacons/".format(user_id), data=data)

    def get_user(self, id, **data):
        """
        GET /users/:id/
        Returns a :format:`user` for the specified user as ``user``. If you want to get details about the currently authenticated user, use ``/users/me/``.
        """
        
        return self.get("/users/{0}/".format(id), data=data)

    def get_user_orders(self, id, **data):
        """
        GET /users/:id/orders/
        Returns a :ref:`paginated <pagination>` response of :format:`orders <order>`, under the key ``orders``, of all orders the user has placed (i.e. where the user was the person buying the tickets).
        :param int id: The id assigned to a user.
        :param datetime changed_since: (optional) Only return attendees changed on or after the time given.
        .. note:: A datetime represented as a string in ISO8601 combined date and time format, always in UTC.
        """
        
        return self.get("/users/{0}/orders/".format(id), data=data)

    def get_user_organizers(self, id, **data):
        """
        GET /users/:id/organizers/
        Returns a :ref:`paginated <pagination>` response of :format:`organizer` objects that are owned by the user.
        """
        
        return self.get("/users/{0}/organizers/".format(id), data=data)

    def get_user_owned_events(self, id, **data):
        """
        GET /users/:id/owned_events/
        Returns a :ref:`paginated <pagination>` response of :format:`events <event>`, under
        the key ``events``, of all events the user owns (i.e. events they are organising)
        """
        
        return self.get("/users/{0}/owned_events/".format(id), data=data)

    def get_user_events(self, id, **data):
        """
        GET /users/:id/events/
        Returns a :ref:`paginated <pagination>` response of :format:`events <event>`, under the key ``events``, of all events the user has access to
        """
        
        return self.get("/users/{0}/events/".format(id), data=data)

    def get_user_venues(self, id, **data):
        """
        GET /users/:id/venues/
        Returns a paginated response of :format:`venue` objects that are owned by the user.
        """
        
        return self.get("/users/{0}/venues/".format(id), data=data)

    def get_user_owned_event_attendees(self, id, **data):
        """
        GET /users/:id/owned_event_attendees/
        Returns a :ref:`paginated <pagination>` response of :format:`attendees <attendee>`,
        under the key ``attendees``, of attendees visiting any of the events the user owns
        (events that would be returned from ``/users/:id/owned_events/``)
        """
        
        return self.get("/users/{0}/owned_event_attendees/".format(id), data=data)

    def get_user_owned_event_orders(self, id, **data):
        """
        GET /users/:id/owned_event_orders/
        Returns a :ref:`paginated <pagination>` response of :format:`orders <order>`,
        under the key ``orders``, of orders placed against any of the events the user owns
        (events that would be returned from ``/users/:id/owned_events/``)
        """
        
        return self.get("/users/{0}/owned_event_orders/".format(id), data=data)

    def get_user_contact_lists(self, id, **data):
        """
        GET /users/:id/contact_lists/
        Returns a list of :format:`contact_list` that the user owns as the key
        ``contact_lists``.
        """
        
        return self.get("/users/{0}/contact_lists/".format(id), data=data)

    def post_user_contact_lists(self, id, **data):
        """
        POST /users/:id/contact_lists/
        Makes a new :format:`contact_list` for the user and returns it as
        ``contact_list``.
        """
        
        return self.post("/users/{0}/contact_lists/".format(id), data=data)

    def get_user_contact_list(self, id, contact_list_id, **data):
        """
        GET /users/:id/contact_lists/:contact_list_id/
        Gets a user's :format:`contact_list` by ID as ``contact_list``.
        """
        
        return self.get("/users/{0}/contact_lists/{0}/".format(id,contact_list_id), data=data)

    def post_user_contact_list(self, id, contact_list_id, **data):
        """
        POST /users/:id/contact_lists/:contact_list_id/
        Updates the :format:`contact_list` and returns it as ``contact_list``.
        """
        
        return self.post("/users/{0}/contact_lists/{0}/".format(id,contact_list_id), data=data)

    def delete_user_contact_list(self, id, contact_list_id, **data):
        """
        DELETE /users/:id/contact_lists/:contact_list_id/
        Deletes the contact list. Returns ``{"deleted": true}``.
        """
        
        return self.delete("/users/{0}/contact_lists/{0}/".format(id,contact_list_id), data=data)

    def get_user_contact_lists_contacts(self, id, contact_list_id, **data):
        """
        GET /users/:id/contact_lists/:contact_list_id/contacts/
        Returns the :format:`contacts <contact>` on the contact list
        as ``contacts``.
        """
        
        return self.get("/users/{0}/contact_lists/{0}/contacts/".format(id,contact_list_id), data=data)

    def post_user_contact_lists_contacts(self, id, contact_list_id, **data):
        """
        POST /users/:id/contact_lists/:contact_list_id/contacts/
        Adds a new contact to the contact list. Returns ``{"created": true}``.
        There is no way to update entries in the list; just delete the old one
        and add the updated version.
        """
        
        return self.post("/users/{0}/contact_lists/{0}/contacts/".format(id,contact_list_id), data=data)

    def delete_user_contact_lists_contacts(self, id, contact_list_id, **data):
        """
        DELETE /users/:id/contact_lists/:contact_list_id/contacts/
        Deletes the specified contact from the contact list.
        Returns ``{"deleted": true}``.
=======
        """
        
        return self.delete("/users/{0}/contact_lists/{0}/contacts/".format(id,contact_list_id), data=data)

    def get_user_bookmarks(self, id, **data):
        """
        GET /users/:id/bookmarks/
        Gets all the user's saved events.
        In order to update the saved events list, the user must unsave or save each event.
        A user is authorized to only see his/her saved events.
        """
        
        return self.get("/users/{0}/bookmarks/".format(id), data=data)

    def post_user_bookmarks_save(self, id, **data):
        """
        POST /users/:id/bookmarks/save/
        Adds a new bookmark for the user. Returns ``{"created": true}``.
        A user is only authorized to save his/her own events.
        """
        
        return self.post("/users/{0}/bookmarks/save/".format(id), data=data)

    def post_user_bookmarks_unsave(self, id, **data):
        """
        POST /users/:id/bookmarks/unsave/
        Removes the specified bookmark from the event for the user. Returns ``{"deleted": true}``.
        A user is only authorized to unsave his/her own events.
        error NOT_AUTHORIZED
        You are not authorized to unsave an event for this user.
        error ARGUMENTS_ERROR
        There are errors with your arguments.
        """
        
        return self.post("/users/{0}/bookmarks/unsave/".format(id), data=data)

    def get_venue(self, id, **data):
        """
        GET /venues/:id/
        Returns a :format:`venue` object.
        """
        
        return self.get("/venues/{0}/".format(id), data=data)

    def post_venue(self, id, **data):
        """
        POST /venues/:id/
        Updates a :format:`venue` and returns it as an object.
        """
        
        return self.post("/venues/{0}/".format(id), data=data)

    def post_venues(self, **data):
        """
        POST /venues/
        Creates a new :format:`venue` with associated :format:`address`.
        ..start-internal
        """
        return self.post("/venues/", data=data)

    def get_venues_search(self, **data):
        """
        GET /venues/search/
        Search for venues. Returns a list of venue objects.
        ..end-internal
        """
        return self.get("/venues/search/", data=data)

    def get_venues_events(self, id, **data):
        """
        GET /venues/:id/events/
        Returns events of a given :format:`venue`.
        """
        
        return self.get("/venues/{0}/events/".format(id), data=data)

    def get_webhook(self, id, **data):
        """
        GET /webhooks/:id/
        Returns a :format:`webhook` for the specified webhook as ``webhook``.
        """
        
        return self.get("/webhooks/{0}/".format(id), data=data)

    def delete_webhook(self, id, **data):
        """
        DELETE /webhooks/:id/
        Deletes the specified :format:`webhook` object.
        """
        
        return self.delete("/webhooks/{0}/".format(id), data=data)

    def get_webhooks(self, **data):
        """
        GET /webhooks/
        Returns the list of :format:`webhook` objects that belong to the authenticated user.
        """
        return self.get("/webhooks/", data=data)

    def post_webhooks(self, **data):
        """
        POST /webhooks/
        Creates a :format:`webhook` for the authenticated user.
        The ``actions`` parameter accepts a comma-separated value that can include any or all of the following:
        * ``attendee.checked_in`` - Triggered when an attendee's barcode is scanned in.
        * ``attendee.checked_out`` - Triggered when an attendee's barcode is scanned out.
        * ``attendee.updated`` - Triggered when attendee data is updated.
        * ``event.created`` - Triggered when an event is initially created.
        * ``event.published`` - Triggered when an event is published and made live.
        * ``event.updated`` - Triggered when event data is updated.
        * ``event.unpublished`` - Triggered when an event is unpublished.
        * ``order.placed`` - Triggers when an order is placed for an event. Generated Webhook's API endpoint is to the Order endpoint.
        * ``order.refunded`` - Triggers when an order is refunded for an event.
        * ``order.updated`` - Triggers when order data is updated for an event.
        * ``organizer.updated`` - Triggers when organizer data is updated.
        * ``ticket_class.created`` - Triggers when a ticket class is created.
        * ``ticket_class.deleted`` - Triggers when a ticket class is deleted.
        * ``ticket_class.updated`` - Triggers when a ticket class is updated.
        * ``venue.updated`` - Triggers when venue data is updated.        """
        return self.post("/webhooks/", data=data)
